// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String     @id @default(cuid())
  email          String     @unique
  clerkUserId    String?    @unique
  name           String?
  imageUrl       String?
  createdIssues  Issue[]    @relation("Reporter")
  assignedIssues Issue[]    @relation("Assignee")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Issue {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  status      IssuesStatus @default(TODO)
  priority    IssuePriority @default(MEDIUM)
  reporterId  String
  sprintId    String?
  assigneeId  String?
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reporter User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  assignee User? @relation("Assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint  Sprint? @relation(fields: [sprintId], references: [id], onDelete: SetNull)

  @@index([status, order])
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String
  sprints        Sprint[]
  issues         Issue[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, key])

}

model Sprint {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  projectId   String
  status      SprintStatus @default(PLANNED )
  issues      Issue[]
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum IssuesStatus {
  TODO
  IN_PROGRESS
  DONE
}
enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}